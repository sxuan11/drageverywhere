/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./core/drag.js":
/*!**********************!*\
  !*** ./core/drag.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_deepCopy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/deepCopy */ \"./core/utils/deepCopy.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./core/utils/index.js\");\n\r\n\r\n\r\n\r\nclass Drag extends (events__WEBPACK_IMPORTED_MODULE_0___default()) {\r\n  // 源盒子ID\r\n  sourceBox = '';\r\n  // 被拖入的盒子ID\r\n  dragBox = '';\r\n  // 参照物盒子元素\r\n  referBox = 'body';\r\n  // 需要寻找的父盒子被拖拽的className\r\n  dragTargetClassName = '';\r\n  // x轴原点\r\n  pointX = 0;\r\n  // y轴原点\r\n  pointY = 0;\r\n  // 监听者新的x轴原点\r\n  newPointX = 0;\r\n  // 监听者新的y轴原点\r\n  newPointY = 0;\r\n  // 原来的x轴长度\r\n  realXLength = 0;\r\n  // 原来的y轴长度\r\n  realYLength = 0;\r\n  // x轴长度\r\n  xLength = 0;\r\n  // y轴长度\r\n  yLength = 0;\r\n  // x轴减去元素的长度\r\n  xelementLength = 0;\r\n  // y轴减去元素的长度\r\n  yelementLength = 0;\r\n  // 正在拖动的元素\r\n  draggingElement = '';\r\n  // 正在拖动的元素的距离\r\n  draggingRect = '';\r\n  // 被拖入的占位符\r\n  imgs = '';\r\n  // 初次点击的鼠标距离\r\n  mouseInfo = {};\r\n  // 内部拖动\r\n  dragging = false;\r\n  // 外部进内部\r\n  dropdown = false;\r\n  // 内部回到外部\r\n  putBack = false;\r\n  // 放大缩小\r\n  zoom = false;\r\n  // 父节点\r\n  parentNode = '';\r\n  // resize监视器\r\n  resizeObserve = '';\r\n  // 全局zIndex\r\n  zIndex = 5000;\r\n  // 镜像元素\r\n  _mirror = '';\r\n  // 镜像元素的距离\r\n  _mirrorRect = '';\r\n  // 点击鼠标的事件\r\n  mouseDownEvent = '';\r\n  // 拖拽区和源区域的映射关系\r\n  sourceMap = new Map();\r\n  dragSourceMap = new Map();\r\n  listenerStyleMap = new Map();\r\n  initBoxWidth = 300;\r\n  initBoxHeight = '';\r\n  dragMaxWidth = 600;\r\n  dragMaxHeight = 0;\r\n  dragMinWidth = 100;\r\n  dragMinHeight = 0;\r\n  dragNumber = 0;\r\n  emitTime = 1000;\r\n  baseStyle = {\r\n    position: 'absolute',\r\n    width: '8px',\r\n    height: '8px',\r\n    zIndex: 5000,\r\n  };\r\n  aspectRatio = '16:9';\r\n  // 比例\r\n  ratio = 0;\r\n  // 单位\r\n  unit = 'px';\r\n  // 盒子宽度\r\n  parentWidth = 0;\r\n  // 盒子高度\r\n  parentHeight = 0;\r\n  // 拖拉盒子信息\r\n  dragBoxInfo = {\r\n    dragBoxNowWidth: 0,\r\n    dragBoxNowHeight: 0,\r\n    dragBoxLeft: 0,\r\n    dragBoxTop: 0,\r\n  }\r\n  // 拖拉方向\r\n  direction = '';\r\n  // 是否是监听者,默认不是\r\n  notListener = true;\r\n  // 是否是使用宽度来计算比例\r\n  useWidth = false;\r\n  // 源比例\r\n  sourceRatio = 0;\r\n  // 源宽度\r\n  sourceWidth = 0;\r\n  // 源高度\r\n  sourceHeight = 0;\r\n  // 是否获取过信息\r\n  _isGetInfor = false;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param sourceBox 需要被拖动的父盒子ID\r\n   * @param dragBox 目标拖动区域\r\n   * @param dragTargetClassName 目标拖动元素类名\r\n   * @param notListener 是否不是监听者（默认不是）\r\n   * @param imgs 被拖走元素的占位图\r\n   * @param initBoxHeight 生成拖拽元素的初始高度\r\n   * @param initBoxWidth 生成拖拽元素的初始宽度\r\n   * @param dragNumber 最大的拖拽数量\r\n   * @param aspectRatio 拖拽元素的比例\r\n   * @param emitTime\r\n   * @param dragMinWidth 生成拖拽元素的最小宽度\r\n   * @param dragMaxWidth 生成拖拽元素的最大宽度\r\n   * @param referBox\r\n   */\r\n  constructor({\r\n                sourceBox,\r\n                dragBox,\r\n                dragTargetClassName,\r\n                notListener,\r\n                imgs,\r\n                initBoxHeight,\r\n                initBoxWidth,\r\n                dragNumber,\r\n                aspectRatio = '16:9',\r\n                emitTime = 1000,\r\n                dragMinWidth,\r\n                dragMaxWidth,\r\n                referBox\r\n              }) {\r\n    super();\r\n    this.sourceBox = sourceBox;\r\n    this.dragBox = dragBox;\r\n    this.referBox = referBox ? referBox : 'body';\r\n    this.imgs = imgs;\r\n    this.dragTargetClassName = dragTargetClassName;\r\n    this.initBoxHeight = initBoxHeight ? initBoxHeight : this.initBoxHeight;\r\n    this.initBoxWidth = initBoxWidth ? initBoxWidth : this.initBoxWidth;\r\n    this.dragMaxWidth = dragMaxWidth ? dragMaxWidth : this.dragMaxWidth;\r\n    this.dragMinWidth = dragMinWidth ? dragMinWidth : this.dragMinWidth;\r\n    this.emitTime = emitTime;\r\n    this.aspectRatio = aspectRatio;\r\n    this.dragNumber = dragNumber;\r\n    if (notListener !== undefined) {\r\n      this.notListener = notListener\r\n    }\r\n    this._searchOriginPoint(this.notListener);\r\n    this._calculateRatio();\r\n    if (this.notListener) {\r\n      this.startListener();\r\n    } else {\r\n      this.startListenerListening();\r\n    }\r\n  }\r\n\r\n  setZIndex(num) {\r\n    this.zIndex = parseInt(num);\r\n  }\r\n\r\n  // 搜索XY的原点坐标\r\n  _searchOriginPoint(emit = true) {\r\n    const result = document.querySelector(this.dragBox)?.getBoundingClientRect();\r\n    if(typeof result !== 'object') return;\r\n    this.pointX = result.x;\r\n    this.pointY = result.y;\r\n    const { height, width } = document.querySelector(this.referBox).getBoundingClientRect();\r\n    this.parentWidth = parseFloat(parseFloat(width).toFixed(2));\r\n    this.parentHeight = parseFloat(parseFloat(height).toFixed(2));\r\n    this._calculateXYlength(result);\r\n    if (emit) {\r\n      this._isBeyondBoundary();\r\n      this._changeWidthAndHeight({height: this.parentHeight, width:  this.parentWidth});\r\n    }\r\n  }\r\n\r\n  // 计算XY的长度\r\n  _calculateXYlength(r) {\r\n    this.xLength = r.width;\r\n    this.realXLength = r.width;\r\n    this.yLength = r.height;\r\n    this.realYLength = r.height;\r\n  }\r\n\r\n  // 计算比例\r\n  _calculateRatio() {\r\n    if (this.initBoxHeight) {\r\n      this.ratio = this.initBoxWidth / this.initBoxHeight;\r\n    } else {\r\n      if (!this.aspectRatio.includes(':')) {\r\n        throw new Error(`aspectRatio param must be an X:Y`)\r\n      }\r\n      const result = this.aspectRatio.split(':');\r\n      this.ratio = result[0] / result[1];\r\n    }\r\n    this._calculateMaxAndMinHeight();\r\n  }\r\n\r\n  // 计算拖拉盒子的最大和最小宽高\r\n  _calculateMaxAndMinHeight() {\r\n    if (!this.initBoxHeight) {\r\n      this.initBoxHeight = this.initBoxWidth / this.ratio;\r\n    }\r\n    this.dragMaxHeight = this.dragMaxWidth / this.ratio;\r\n    this.dragMinHeight = this.dragMinWidth / this.ratio;\r\n  }\r\n\r\n  // 窗口宽高发生改变上传事件\r\n  _changeWidthAndHeight({height, width}) {\r\n    this.emit('changeWidthAndHeight', {parentHeight: height, parentWidth: width})\r\n  }\r\n\r\n  // 设定源信息\r\n  setSourceData(data, recalculate = false) {\r\n    this.sourceRatio = data.width / data.height;\r\n    this.sourceHeight = data.height;\r\n    this.sourceWidth = data.width;\r\n    this._calculateListenerOriginPoint(recalculate)\r\n  }\r\n\r\n  // 缩放窗口的时候超出边界\r\n  _isBeyondBoundary() {\r\n    const eleList = document.querySelectorAll('.drag-box');\r\n    let xTran, width, yTran, height, xAll, yAll, xDiff = 0, yDiff = 0;\r\n    for (let i = 0; i < eleList.length; i++) {\r\n      xTran = parseFloat(eleList[i].style.transform.substr(10).split(',')[0]);\r\n      width = parseFloat(eleList[i].style.width)\r\n      yTran = parseFloat(eleList[i].style.transform.substr(10).split(',')[1])\r\n      height = parseFloat(eleList[i].style.height)\r\n      xAll = xTran + width;\r\n      yAll = yTran + height;\r\n      if (this.xLength < xAll) {\r\n        xDiff = xAll - this.xLength;\r\n      }\r\n      if (this.yLength < yAll) {\r\n        yDiff = yAll - this.yLength;\r\n      }\r\n      eleList[i].style.transform = `translate(${xTran - xDiff}px, ${yTran - yDiff}px)`;\r\n      if (xDiff > 0 || yDiff > 0) {\r\n        this._reportMove(\r\n          {\r\n            id: this.dragSourceMap.get(eleList[i].id).id,\r\n            left: parseFloat(eleList[i].style.transform.substr(10).split(',')[0]),\r\n            top: parseFloat(eleList[i].style.transform.substr(10).split(',')[1]),\r\n            index: parseInt(eleList[i].style.zIndex),\r\n            width: eleList[i].style.width,\r\n            height: eleList[i].style.height,\r\n          })\r\n      }\r\n      xDiff = 0;\r\n      yDiff = 0;\r\n    }\r\n  }\r\n\r\n  // 改变宽高后重新计算原点\r\n  _calculateListenerOriginPoint(recalculate = false) {\r\n    this._searchOriginPoint(false);\r\n    let useWidthCalculateHeight = this.realXLength / this.sourceRatio;\r\n    let useHeightCalculateWidth = this.realYLength * this.sourceRatio;\r\n    if (useWidthCalculateHeight < this.realYLength) {\r\n      this.newPointY = (this.realYLength - useWidthCalculateHeight) / 2;\r\n      this.yLength = useWidthCalculateHeight;\r\n      this.xLength = this.realXLength;\r\n      this.useWidth = true;\r\n    }\r\n    if (useHeightCalculateWidth < this.realXLength) {\r\n      this.newPointX = (this.realXLength - useHeightCalculateWidth) / 2;\r\n      this.xLength = useHeightCalculateWidth;\r\n      this.yLength = this.realYLength;\r\n      this.useWidth = false;\r\n    }\r\n    if (recalculate) {\r\n      this.recalculatePixel()\r\n    }\r\n  }\r\n\r\n  // 注册事件\r\n  startListener() {\r\n    document.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n    document.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n    document.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n    this.resizeObserve = new ResizeObserver((0,_utils__WEBPACK_IMPORTED_MODULE_2__.throttle)(this._searchOriginPoint.bind(this, this.notListener), this.emitTime, false));\r\n    this.resizeObserve.observe(document.querySelector(this.dragBox));\r\n  }\r\n\r\n  // 注册监听者的事件\r\n  startListenerListening() {\r\n    this.resizeObserve = new ResizeObserver((0,_utils__WEBPACK_IMPORTED_MODULE_2__.throttle)(this._calculateListenerOriginPoint.bind(this, true), 800));\r\n    this.resizeObserve.observe(document.querySelector(this.dragBox));\r\n  }\r\n\r\n  /**\r\n   * 构建拖动元素的样式\r\n   * @param node html节点\r\n   * @param mirror 是否虚拟元素\r\n   * @returns {string|{top: number, left: number}}\r\n   */\r\n  _styleMake(node, mirror = false) {\r\n    let left;\r\n    let top;\r\n    if (mirror) {\r\n      left = node.clientX - (this.mouseDownEvent.clientX - this._mirrorRect.left);\r\n      top = node.clientY - (this.mouseDownEvent.clientY - this._mirrorRect.top);\r\n      return {\r\n        top,\r\n        left\r\n      };\r\n    } else {\r\n      left = node.clientX - this.pointX - (this.mouseDownEvent.clientX - this.draggingRect.left);\r\n      top = node.clientY - this.pointY - (this.mouseDownEvent.clientY - this.draggingRect.top);\r\n      // if (this.dragging) {\r\n      if (left < 0) {\r\n        left = 0;\r\n      }\r\n      if (left > this.xelementLength) {\r\n        left = this.xelementLength;\r\n      }\r\n      if (top < 0) {\r\n        top = 0;\r\n      }\r\n      if (top > this.yelementLength) {\r\n        top = this.yelementLength;\r\n      }\r\n      // }\r\n      return `translate(${left}px, ${top}px)`;\r\n    }\r\n\r\n  }\r\n\r\n  // 构建虚拟节点\r\n  _makeMirrorNode(node) {\r\n    this._mirrorRect = node.getBoundingClientRect();\r\n    this._mirror = node.cloneNode(true);\r\n    const style = {\r\n      width: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getRectWidth)(this._mirrorRect) + 'px',\r\n      height: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getRectHeight)(this._mirrorRect) + 'px',\r\n      position: 'fixed',\r\n      'z-index': '9999',\r\n      opacity: '.5',\r\n      top: (node.clientY - (node.clientY - this._mirrorRect.top)) + 'px',\r\n      left: (node.clientX - (node.clientX - this._mirrorRect.left)) + 'px'\r\n    }\r\n    ;(0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(this._mirror, style);\r\n    document.body.appendChild(this._mirror);\r\n  }\r\n\r\n  // 虚拟节点移动\r\n  _mirrorNodeMove(event) {\r\n    const style = this._styleMake(event, true);\r\n    this._mirror.style.left = style.left + 'px';\r\n    this._mirror.style.top = style.top + 'px';\r\n    if (this._isInDragBox(event)) {\r\n      this._mirror.style.width = this.initBoxWidth + this.unit;\r\n      this._mirror.style.height = this.initBoxHeight + this.unit;\r\n    } else {\r\n      this._mirror.style.width = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getRectWidth)(this._mirrorRect) + 'px';\r\n      this._mirror.style.height = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getRectHeight)(this._mirrorRect) + 'px';\r\n    }\r\n  }\r\n\r\n  // 删除虚拟节点\r\n  _removeMirrorNode() {\r\n    document.body.removeChild(this._mirror);\r\n  }\r\n\r\n  // 创建拖走后的img\r\n  _makePlaceholderImg(draggingElement = this.draggingElement, drawId = '') {\r\n    const inside = document.createElement('div');\r\n    const img = document.createElement('img');\r\n    const style = {\r\n      height: '100%',\r\n      width: '100%',\r\n    }\r\n    ;(0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(inside, style);\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(img, style);\r\n    img.style.objectFit = 'cover';\r\n    img.src = this.imgs;\r\n    inside.appendChild(img);\r\n    const id = 'id' + Date.now().toString();\r\n    inside.id = drawId ? drawId + '-img' : id;\r\n    try {\r\n      draggingElement.parentNode.replaceChild(inside, draggingElement);\r\n      return inside.id;\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  // 是否在目标拖动的盒子中\r\n  _isInDragBox(event) {\r\n    if (event.clientX > this.pointX && event.clientY > this.pointY) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // 移动内部的拖动盒子\r\n  _moveDragBox(event) {\r\n    if (this._isInDragBox(event)) {\r\n      this.parentNode.style.transform = this._styleMake(event);\r\n      this.isPutBackDragBox(false)\r\n    } else {\r\n      this.isPutBackDragBox()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实时上传移动事件\r\n   * @private\r\n   */\r\n  _emitMove() {\r\n    this.emit('mouseMoving')\r\n  }\r\n\r\n  /**\r\n   * 上传鼠标松开事件\r\n   * @private\r\n   */\r\n  _emitMouseUp() {\r\n    this.emit('mouseUp')\r\n  }\r\n\r\n  // 上传移动事件\r\n  _reportMove(info) {\r\n    let obj = {\r\n      parentWidth: this.parentWidth,\r\n      parentHeight: this.parentHeight,\r\n    }\r\n    if (Object.keys(info).length) {\r\n      obj = {\r\n        ...obj,\r\n        ...info\r\n      }\r\n    } else {\r\n      obj = {\r\n        ...obj,\r\n        id: this.dragSourceMap.get(this.parentNode.id).id,\r\n        left: parseFloat(this.parentNode.style.transform.substr(10).split(',')[0]),\r\n        top: parseFloat(this.parentNode.style.transform.substr(10).split(',')[1]),\r\n        index: parseInt(this.parentNode.style.zIndex),\r\n        width: this.parentNode.style.width,\r\n        height: this.parentNode.style.height,\r\n      }\r\n      obj.width = parseFloat(parseFloat(obj.width).toFixed(2));\r\n      obj.height = parseFloat(parseFloat(obj.height).toFixed(2));\r\n    }\r\n    this.emit('drag-move', obj)\r\n  }\r\n\r\n  // 上传缩放事件\r\n  _reportZoom(info) {\r\n    let obj = {\r\n      parentWidth: this.parentWidth,\r\n      parentHeight: this.parentHeight,\r\n    }\r\n    if (Object.keys(info).length) {\r\n      obj = {\r\n        ...obj,\r\n        ...info\r\n      }\r\n    } else {\r\n      obj = {\r\n        ...obj,\r\n        id: this.dragSourceMap.get(this.parentNode.id).id,\r\n        left: parseFloat(this.parentNode.style.transform.substr(10).split(',')[0]),\r\n        top: parseFloat(this.parentNode.style.transform.substr(10).split(',')[1]),\r\n        index: this.parentNode.style.zIndex,\r\n        width: this.parentNode.style.width,\r\n        height: this.parentNode.style.height,\r\n      }\r\n    }\r\n    obj.width = parseFloat(parseFloat(obj.width).toFixed(2));\r\n    obj.height = parseFloat(parseFloat(obj.height).toFixed(2));\r\n    this.emit('drag-zoom', obj)\r\n  }\r\n\r\n  // 判断当前是否是放回盒子的\r\n  isPutBackDragBox(back = true) {\r\n    this.putBack = back\r\n    const element = document.querySelector('#' + this.dragSourceMap.get(this.parentNode.id).imgId);\r\n    if (back) {\r\n      this.parentNode.style.opacity = '0';\r\n      element.style.backgroundColor = '#78A7ED';\r\n      element.style.opacity = '.3';\r\n    } else {\r\n      this.parentNode.style.opacity = '';\r\n      element.style.backgroundColor = '';\r\n      element.style.opacity = '';\r\n    }\r\n  }\r\n\r\n  // 返回拖拽盒子\r\n  putBackDragBox() {\r\n    const element = document.querySelector('#' + this.dragSourceMap.get(this.parentNode.id).imgId);\r\n    element.replaceWith(this.parentNode.childNodes[0])\r\n    document.querySelector(this.dragBox).removeChild(this.parentNode);\r\n    const id = this.dragSourceMap.get(this.parentNode.id).id;\r\n    this.emit('drag-in', {\r\n      id\r\n    });\r\n    this.sourceMap.delete(id);\r\n    this.dragSourceMap.delete(this.parentNode.id);\r\n  }\r\n\r\n  // 内部拖拽\r\n  insideDrag(event) {\r\n    this.dragging = true;\r\n    this.parentNode = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.findParentNode)(event.target, 'drag-box');\r\n    this.draggingRect = this.parentNode.getBoundingClientRect();\r\n    this.xelementLength = this.realXLength - this.draggingRect.width;\r\n    this.yelementLength = this.realYLength - this.draggingRect.height;\r\n    this.zIndex += 1;\r\n    this.parentNode.style.zIndex = this.zIndex.toString();\r\n  }\r\n\r\n  // 外部拖拽进内部\r\n  outsideDragIntoInside(event) {\r\n    this.draggingElement = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.findParentNode)(event.target, this.dragTargetClassName);\r\n    this.draggingRect = this.draggingElement.getBoundingClientRect();\r\n    this.xelementLength = this.realXLength - this.initBoxWidth;\r\n    this.yelementLength = this.realYLength - this.initBoxHeight;\r\n    this._makeMirrorNode(this.draggingElement);\r\n    this.dropdown = true;\r\n  }\r\n\r\n  // 记录放大缩小的值\r\n  zoomReady(event, direction) {\r\n    this.zoom = true;\r\n    this.direction = direction;\r\n    this.parentNode = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.findParentNode)(event.target, 'drag-box');\r\n    this.dragBoxInfo.dragBoxNowWidth = parseFloat(this.parentNode.style.width);\r\n    this.dragBoxInfo.dragBoxNowHeight = parseFloat(this.parentNode.style.height);\r\n    this.dragBoxInfo.dragBoxLeft = parseFloat(this.parentNode.style.transform.substr(10).split(',')[0])\r\n    this.dragBoxInfo.dragBoxTop = parseFloat(this.parentNode.style.transform.substr(10).split(',')[1])\r\n  }\r\n\r\n  // 放大缩小处理\r\n  zoomInOut(event) {\r\n    let xOffset, yOffset, nowWidth, nowHeight, result;\r\n    xOffset = event.clientX - this.mouseDownEvent.clientX;\r\n    yOffset = (xOffset) / this.ratio;\r\n    switch (this.direction) {\r\n      case \"br\":\r\n        nowWidth = this.dragBoxInfo.dragBoxNowWidth + xOffset;\r\n        nowHeight = this.dragBoxInfo.dragBoxNowHeight + yOffset;\r\n        result = this.checkMaxAndMinWidth(nowWidth, nowHeight)\r\n        this.parentNode.style.width = result.width + 'px';\r\n        this.parentNode.style.height = result.height + 'px';\r\n        break;\r\n      case \"tl\":\r\n        nowWidth = this.dragBoxInfo.dragBoxNowWidth - xOffset;\r\n        nowHeight = this.dragBoxInfo.dragBoxNowHeight - yOffset;\r\n        result = this.checkMaxAndMinWidth(nowWidth, nowHeight);\r\n        this.parentNode.style.width = result.width + 'px';\r\n        this.parentNode.style.height = result.height + 'px';\r\n        if (!result.lock) {\r\n          this.parentNode.style.transform = `translate(${this.dragBoxInfo.dragBoxLeft + xOffset}px, ${this.dragBoxInfo.dragBoxTop + yOffset}px)`;\r\n        }\r\n        break;\r\n      case \"tr\":\r\n        nowWidth = this.dragBoxInfo.dragBoxNowWidth + xOffset;\r\n        nowHeight = this.dragBoxInfo.dragBoxNowHeight + yOffset;\r\n        result = this.checkMaxAndMinWidth(nowWidth, nowHeight);\r\n        this.parentNode.style.width = result.width + 'px';\r\n        this.parentNode.style.height = result.height + 'px';\r\n        if (!result.lock) {\r\n          this.parentNode.style.transform = `translate(${this.dragBoxInfo.dragBoxLeft}px, ${this.dragBoxInfo.dragBoxTop - yOffset}px)`;\r\n        }\r\n        break;\r\n      case \"bl\":\r\n        nowWidth = this.dragBoxInfo.dragBoxNowWidth - xOffset;\r\n        nowHeight = this.dragBoxInfo.dragBoxNowHeight - yOffset;\r\n        result = this.checkMaxAndMinWidth(nowWidth, nowHeight);\r\n        this.parentNode.style.width = result.width + 'px';\r\n        this.parentNode.style.height = result.height + 'px';\r\n        if (!result.lock) {\r\n          this.parentNode.style.transform = `translate(${this.dragBoxInfo.dragBoxLeft + xOffset}px, ${this.dragBoxInfo.dragBoxTop}px)`;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  // 检查放大缩小是否超过了阈值\r\n  checkMaxAndMinWidth(inwidth, inheight) {\r\n    let result = {\r\n      width: inwidth,\r\n      height: inheight,\r\n      lock: false,\r\n    }\r\n    if (inwidth > this.dragMaxWidth) {\r\n      result.width = this.dragMaxWidth;\r\n      result.lock = true;\r\n    } else if (inwidth < this.dragMinWidth) {\r\n      result.width = this.dragMinWidth;\r\n      result.lock = true;\r\n    }\r\n    if (inheight > this.dragMaxHeight) {\r\n      result.height = this.dragMaxHeight;\r\n      result.lock = true;\r\n    } else if (inheight < this.dragMinHeight) {\r\n      result.height = this.dragMinHeight;\r\n      result.lock = true;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 获取信息\r\n   * @returns {{dragHeight: number, allHeight: number, eleWidth: number, eleHeight: number, top: number, left: number, allWidth: number, dragWidth: number}}\r\n   */\r\n  _getInformation() {\r\n    const parentNode = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.findParentNode)(this.mouseDownEvent.target, 'drag-box');\r\n    const { width: dragWidth, height: dragHeight } = document.querySelector(this.dragBox).getBoundingClientRect();\r\n    const { width, height, transform } = parentNode.style;\r\n    const eleWidth = parseFloat(width);\r\n    const eleHeight = parseFloat(height);\r\n    const left = parseFloat(transform.substr(10).split(',')[0]);\r\n    const top = parseFloat(transform.substr(10).split(',')[1]);\r\n    const allWidth = left + eleWidth;\r\n    const allHeight = top + eleHeight;\r\n    this._isGetInfor = true;\r\n    return { parentNode, dragWidth, dragHeight, eleWidth, eleHeight, allWidth, allHeight, left, top }\r\n  }\r\n\r\n  /**\r\n   * 检查右边是否超出边界\r\n   * @private\r\n   */\r\n  _checkRightBoundary() {\r\n    const { parentNode, dragWidth, eleWidth, allWidth, left, top } = this._getInformation();\r\n    const leftDiff = allWidth - dragWidth;\r\n    let newLeft = left - leftDiff;\r\n    let style = {};\r\n    if(newLeft < this.pointX){\r\n      const widthDiff = this.pointX - newLeft;\r\n      newLeft = this.pointX;\r\n      const newWidth = eleWidth - widthDiff;\r\n      const newHeight = newWidth / this.ratio;\r\n      style.transform = `translate(${newLeft}px, ${top}px)`;\r\n      style.width = `${newWidth}px`;\r\n      style.height = `${newHeight}px`;\r\n    } else {\r\n      style.transform = `translate(${newLeft}px, ${top}px)`;\r\n    }\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(parentNode, style);\r\n  }\r\n\r\n  /**\r\n   * 检查下边是否超出边界\r\n   * @private\r\n   */\r\n  _checkBottomBoundary() {\r\n    const { parentNode, dragHeight, eleHeight, allHeight, left, top } = this._getInformation();\r\n    const topDiff = allHeight - dragHeight;\r\n    let newTop = top - topDiff;\r\n    let style = {};\r\n    if(newTop < this.pointY){\r\n      const heightDiff = this.pointY - newTop;\r\n      newTop = this.pointY;\r\n      const newHeight = eleHeight - heightDiff;\r\n      const newWidth = newHeight * this.ratio;\r\n      style.transform = `translate(${left}px, ${newTop}px)`;\r\n      style.width = `${newWidth}px`;\r\n      style.height = `${newHeight}px`;\r\n    } else {\r\n      style.transform = `translate(${left}px, ${newTop}px)`;\r\n    }\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(parentNode, style);\r\n  }\r\n\r\n  /**\r\n   * 检查左边是否超出边界\r\n   * @private\r\n   */\r\n  _checkLeftBoundary() {\r\n    const { parentNode, dragWidth, eleWidth, left, top } = this._getInformation();\r\n    const leftDiff = this.pointX - left;\r\n    let newLeft = this.pointX;\r\n    let style = {};\r\n    if(dragWidth < eleWidth){\r\n      const newWidth = eleWidth - leftDiff;\r\n      const newHeight =  newWidth / this.ratio;\r\n      style.transform = `translate(${newLeft}px, ${top}px)`;\r\n      style.width = `${newWidth}px`;\r\n      style.height = `${newHeight}px`;\r\n    } else {\r\n      style.transform = `translate(${newLeft}px, ${top}px)`;\r\n    }\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(parentNode, style);\r\n  }\r\n\r\n  /**\r\n   * 检查上边是否超出边界\r\n   * @private\r\n   */\r\n  _checkTopBoundary() {\r\n    const { parentNode,  dragHeight,  eleHeight, left, top } = this._getInformation();\r\n    const topDiff = 0 - top;\r\n    let newTop = 0;\r\n    let style = {};\r\n    if(dragHeight < eleHeight){\r\n      const newHeight =  eleHeight - topDiff;\r\n      const newWidth = newHeight * this.ratio;\r\n      style.transform = `translate(${left}px, ${newTop}px)`;\r\n      style.width = `${newWidth}px`;\r\n      style.height = `${newHeight}px`;\r\n    } else {\r\n      style.transform = `translate(${left}px, ${newTop}px)`;\r\n    }\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(parentNode, style);\r\n  }\r\n\r\n  /**\r\n   * 检查放大缩小是否超出了拖动区域\r\n   * @private\r\n   */\r\n  _checkIsZoomOut() {\r\n    const { dragWidth, dragHeight, allWidth, allHeight, left, top } = this._getInformation();\r\n    if(allWidth > dragWidth) {\r\n      this._checkRightBoundary();\r\n    }\r\n    if(allHeight > dragHeight){\r\n      this._checkBottomBoundary();\r\n    }\r\n    if(left < this.pointX) {\r\n      this._checkLeftBoundary();\r\n    }\r\n    if(top < 0) {\r\n      this._checkTopBoundary();\r\n    }\r\n    this._reportZoom({});\r\n  }\r\n\r\n  // 处理鼠标点击事件\r\n  handleMouseDown(event) {\r\n    if (event.target.id === this.sourceBox.substr(1)) return;\r\n    this.mouseDownEvent = event;\r\n    event.preventDefault();\r\n    this.putBack = false;\r\n    this.dragging = false;\r\n    this.zoom = false;\r\n    this.mouseInfo.offsetX = event.offsetX;\r\n    this.mouseInfo.offsetY = event.offsetY;\r\n    // 在内部拖拽\r\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.reduceSearchClass)(event.target)) {\r\n      if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasKey)(event.target, 'direction')) {\r\n        this.zoomReady(event, event.target.direction);\r\n        return;\r\n      }\r\n      this.insideDrag(event)\r\n    } else if (document.querySelector(this.sourceBox).contains(event.target)) {\r\n      // 在外面移入拖拽区\r\n      if ((this.sourceMap.size + 1) > this.dragNumber) {\r\n        this.emit('dragFull')\r\n        return;\r\n      }\r\n      this.outsideDragIntoInside(event);\r\n    }\r\n  }\r\n\r\n  // 处理鼠标移动事件\r\n  handleMouseMove(event) {\r\n    if (!this.dragging && !this.dropdown && !this.zoom) return;\r\n    if (this.dropdown) {\r\n      this._mirrorNodeMove(event);\r\n    }\r\n    if (this.dragging) {\r\n      this._moveDragBox(event);\r\n      this._emitMove();\r\n    }\r\n    if (this.zoom) {\r\n      this.zoomInOut(event);\r\n    }\r\n  }\r\n\r\n  // 处理鼠标松开事件\r\n  handleMouseUp(event) {\r\n    if (this.dropdown) {\r\n      this._removeMirrorNode();\r\n    }\r\n    if (this.dropdown && this._isInDragBox(event)) {\r\n      this.makeDragBox(event)\r\n    }\r\n    if (this.putBack) {\r\n      this.putBackDragBox();\r\n      this._emitMouseUp();\r\n    }\r\n    if (this.dragging && !this.putBack) {\r\n      this._reportMove({});\r\n      this._emitMouseUp();\r\n    }\r\n    if (this.zoom) {\r\n      this._checkIsZoomOut()\r\n      this._emitMouseUp();\r\n    }\r\n    this.dragging = false;\r\n    this.dropdown = false;\r\n    this.zoom = false;\r\n  }\r\n\r\n  // 生成拖拉盒子\r\n  makeDragBox(event) {\r\n    const inPlaceId = this._makePlaceholderImg(this.draggingElement, this.draggingElement.id);\r\n    const parent = document.querySelector(this.dragBox);\r\n    const element = document.createElement('div');\r\n    element.className = 'drag-box';\r\n    element.appendChild(this.draggingElement);\r\n    const elementStyle = {\r\n      position: 'absolute',\r\n      top: '0px',\r\n      left: '0px',\r\n      width: this.initBoxWidth + this.unit,\r\n      height: this.initBoxHeight + this.unit,\r\n      transform: this._styleMake(event),\r\n      'z-index': this.zIndex\r\n    }\r\n    ;(0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(element, elementStyle);\r\n    const elementId = this.draggingElement.id + '-drag';\r\n    element.id = elementId;\r\n    this.generateMovePoint(element);\r\n    parent.appendChild(element);\r\n    const sourceInfo = {\r\n      drawId: elementId,\r\n      imgId: inPlaceId,\r\n    }\r\n    const dragInfo = {\r\n      id: this.draggingElement.id,\r\n      imgId: inPlaceId,\r\n    }\r\n    this.sourceMap.set(this.draggingElement.id, sourceInfo);\r\n    this.dragSourceMap.set(elementId, dragInfo)\r\n    this.emit('drag-out',\r\n      {\r\n        id: this.draggingElement.id,\r\n        left: parseFloat(elementStyle.transform.substr(10).split(',')[0]),\r\n        top: parseFloat(elementStyle.transform.substr(10).split(',')[1]),\r\n        index: parseInt(elementStyle[\"z-index\"]),\r\n        parentWidth: this.parentWidth,\r\n        parentHeight: this.parentHeight,\r\n        width: parseFloat(this.initBoxWidth.toFixed(2)),\r\n        height: parseFloat(this.initBoxHeight.toFixed(2)),\r\n      })\r\n  }\r\n\r\n  /**\r\n   * 转换源样式\r\n   * @param style\r\n   * @returns {{}}\r\n   */\r\n  _convertPixel(style) {\r\n    let result = {}\r\n    if (style.transform) {\r\n      const dragBoxLeft = (parseFloat(style.transform.substr(10).split(',')[0]) / style.parentWidth) * this.parentWidth;\r\n      const dragBoxTop = (parseFloat(style.transform.substr(10).split(',')[1]) / style.parentHeight) * this.parentHeight;\r\n      result.transform = `translate(${dragBoxLeft}px, ${dragBoxTop}px)`;\r\n    }\r\n    if (style.width && style.height) {\r\n      let width = (style.width / style.parentWidth) * this.parentWidth\r\n      if (width > this.dragMaxWidth) {\r\n        width = this.dragMaxWidth;\r\n      }\r\n      if (width < this.dragMinWidth) {\r\n        width = this.dragMinWidth;\r\n      }\r\n      result.width = width + 'px';\r\n      result.height = width / this.ratio + 'px';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 删除指定ID的元素\r\n   * @param id\r\n   */\r\n  destroyById(id) {\r\n    if (!id){\r\n      throw new Error('ID parameter is required')\r\n    }\r\n    const result = this.sourceMap.get(id);\r\n    if(typeof result !== 'object') {\r\n      throw new Error('Cannot find the specified ID element');\r\n    }\r\n    const a = document.querySelector('#'+result.drawId);\r\n    a.parentNode.removeChild(a);\r\n    const b = document.querySelector('#' + result.imgId);\r\n    b.parentNode.removeChild(b);\r\n    this.sourceMap.delete(id);\r\n    this.dragSourceMap.delete(result.drawId);\r\n  }\r\n\r\n  /**\r\n   * 销毁所有元素\r\n   */\r\n  destroyAll() {\r\n    if(!this.sourceMap.size) return;\r\n    for (const item of this.sourceMap.values()){\r\n      const a = document.querySelector('#'+item.drawId);\r\n      a.parentNode.removeChild(a);\r\n      const b = document.querySelector('#' + item.imgId);\r\n      b.parentNode.removeChild(b);\r\n    }\r\n    this.sourceMap.clear();\r\n    this.dragSourceMap.clear();\r\n  }\r\n\r\n  /**\r\n   * 源重新生成拖拉盒子\r\n   * @param data\r\n   * @param data.inPlaceId 占位图ID\r\n   * @param data.drawId 真实拖拽元素ID\r\n   * @param data.id 被拖出的元素ID\r\n   * @param data.width 源的拖动盒子宽度\r\n   * @param data.height 源的拖动盒子高度\r\n   * @param data.parentWidth 源的盒子宽度\r\n   * @param data.parentHeight 源的盒子高度\r\n   * @param data.transform 源的拖动盒子的坐标\r\n   * @param data.z-index 源的拖动盒子的层级\r\n   */\r\n  sourceDrawDragBox(data) {\r\n    const e = typeof data === 'object' ? data : JSON.parse(data);\r\n    const draggingElement = document.querySelector(\"#\" + e.id)\r\n    const imgId = this._makePlaceholderImg(draggingElement, e.id);\r\n    const parent = document.querySelector(this.dragBox);\r\n    const element = document.createElement('div');\r\n    element.className = 'drag-box';\r\n    const elementId = e.id + '-drag';\r\n    element.id = elementId;\r\n    element.appendChild(draggingElement);\r\n    const elementStyle = {\r\n      position: 'absolute',\r\n      top: '0px',\r\n      left: '0px',\r\n      'z-index': e.index,\r\n      ...this._convertPixel(\r\n        {\r\n          width: e.width,\r\n          height: e.height,\r\n          parentWidth: e.parentWidth,\r\n          parentHeight: e.parentHeight,\r\n          transform: `translate(${e.left}px, ${e.top}px)`,\r\n        })\r\n    }\r\n    ;(0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(element, elementStyle);\r\n    this.generateMovePoint(element);\r\n    const sourceInfo = {\r\n      drawId: elementId,\r\n      imgId,\r\n    }\r\n    const dragInfo = {\r\n      id: e.id,\r\n      imgId,\r\n    }\r\n    this.sourceMap.set(e.id, sourceInfo);\r\n    this.dragSourceMap.set(elementId, dragInfo)\r\n    parent.appendChild(element);\r\n  }\r\n\r\n  // 生成拖拉点\r\n  generateMovePoint(element) {\r\n    const tl = document.createElement('div');\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(tl, this.generateMovePointStyle('tl'));\r\n    tl.direction = 'tl'\r\n    element.appendChild(tl);\r\n    const tr = document.createElement('div');\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(tr, this.generateMovePointStyle('tr'));\r\n    tr.direction = 'tr'\r\n    element.appendChild(tr);\r\n    const bl = document.createElement('div');\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(bl, this.generateMovePointStyle('bl'));\r\n    bl.direction = 'bl'\r\n    element.appendChild(bl);\r\n    const br = document.createElement('div');\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(br, this.generateMovePointStyle('br'));\r\n    br.direction = 'br'\r\n    element.appendChild(br);\r\n  }\r\n\r\n  /**\r\n   * 生成拖拉点样式\r\n   * @param direction 方向\r\n   */\r\n  generateMovePointStyle(direction) {\r\n    if (!['tl', 'tr', 'bl', 'br'].includes(direction)) {\r\n      throw new Error(`${direction} must be 'tl' or 'tr' or 'bl' or 'br'`)\r\n    }\r\n    if (direction === 'tl') {\r\n      return {\r\n        ...this.baseStyle,\r\n        cursor: 'nwse-resize',\r\n        top: '-2px',\r\n        left: '-2px',\r\n      }\r\n    }\r\n    if (direction === 'tr') {\r\n      return {\r\n        ...this.baseStyle,\r\n        cursor: 'nesw-resize',\r\n        top: '-2px',\r\n        right: '-2px',\r\n      }\r\n    }\r\n    if (direction === 'bl') {\r\n      return {\r\n        ...this.baseStyle,\r\n        cursor: 'nesw-resize',\r\n        left: '-2px',\r\n        bottom: '-2px',\r\n      }\r\n    }\r\n    if (direction === 'br') {\r\n      return {\r\n        ...this.baseStyle,\r\n        cursor: 'nwse-resize',\r\n        right: '-2px',\r\n        bottom: '-2px',\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 转换监听者的像素\r\n   * @param style\r\n   * @returns {{}}\r\n   */\r\n  convertListenerPixel(style) {\r\n    if(style === null || style === undefined || !Object.keys(style).length) return {};\r\n    let result = {}\r\n    let dragBoxLeft, dragBoxTop;\r\n    if(style.transform) {\r\n      dragBoxLeft = parseFloat(style.transform.substr(10).split(',')[0]);\r\n      dragBoxTop = parseFloat(style.transform.substr(10).split(',')[1]);\r\n    } else {\r\n      dragBoxLeft = style.left;\r\n      dragBoxTop = style.top;\r\n    }\r\n    const dragBoxLeftRatio = dragBoxLeft === 0 ? 0 : dragBoxLeft / style.parentWidth;\r\n    const dragBoxTopRatio = dragBoxTop === 0 ? 0 : dragBoxTop / style.parentHeight;\r\n    const left = dragBoxLeftRatio * this.xLength;\r\n    const top = dragBoxTopRatio * this.yLength;\r\n    if (this.useWidth) {\r\n      if (style.transform || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasKey)(style, 'top') || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasKey)(style, 'left')) {\r\n        result.transform = `translate(${left}px, ${top + (this.newPointY)}px)`;\r\n      }\r\n      if (style.width && style.height) {\r\n        const width = (style.width / style.parentWidth) * this.xLength\r\n        result.width = width + 'px';\r\n        result.height = width / this.ratio + 'px';\r\n      }\r\n    } else {\r\n      if (style.transform || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasKey)(style, 'top') || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasKey)(style, 'left')) {\r\n        result.transform = `translate(${left + (this.newPointX)}px, ${top}px)`;\r\n      }\r\n      if (style.width && style.height) {\r\n        const height = (style.height / style.parentHeight) * this.yLength\r\n        result.width = height * this.ratio + 'px';\r\n        result.height = height + 'px';\r\n      }\r\n    }\r\n    if(style.index) {\r\n      result['z-index'] = style.index;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 改变宽高重新计算像素\r\n   */\r\n  recalculatePixel() {\r\n    const eleList = document.querySelectorAll('.drag-box');\r\n    for (let i = 0; i < eleList.length; i++) {\r\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(eleList[i], this.convertListenerPixel(this.listenerStyleMap.get(eleList[i].id)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听者生成拖拉盒子\r\n   * @param data\r\n   * @param data.inPlaceId 占位图ID\r\n   * @param data.drawId 真实拖拽元素ID\r\n   * @param data.id 被拖出的元素ID\r\n   * @param data.width 源的拖动盒子宽度\r\n   * @param data.height 源的拖动盒子高度\r\n   * @param data.parentWidth 源的盒子宽度\r\n   * @param data.parentHeight 源的盒子高度\r\n   * @param data.transform 源的拖动盒子的坐标\r\n   * @param data.z-index 源的拖动盒子的层级\r\n   */\r\n  listenerDrawDragBox(data) {\r\n    const e = typeof data === 'object' ? data : JSON.parse(data);\r\n    const draggingElement = document.querySelector(\"#\" + e.id)\r\n    const imgId = this._makePlaceholderImg(draggingElement, e.id);\r\n    const parent = document.querySelector(this.dragBox);\r\n    const element = document.createElement('div');\r\n    element.className = 'drag-box';\r\n    element.id = `${e.id}-drag`;\r\n    element.appendChild(draggingElement);\r\n    const obj = {\r\n      width: e.width,\r\n      height: e.height,\r\n      parentWidth: e.parentWidth,\r\n      parentHeight: e.parentHeight,\r\n      left: e.left,\r\n      top: e.top,\r\n    }\r\n    const elementStyle = {\r\n      position: 'absolute',\r\n      top: '0px',\r\n      left: '0px',\r\n      'z-index': e.index,\r\n      ...this.convertListenerPixel(obj)\r\n    }\r\n    ;(0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(element, elementStyle);\r\n    element.style.transition = 'transform .8s, width .8s, height .8s';\r\n    const sourceInfo = {\r\n      drawId: element.id,\r\n      imgId\r\n    }\r\n    this.sourceMap.set(e.id, sourceInfo);\r\n    this.listenerStyleMap.set(element.id, obj);\r\n    parent.appendChild(element);\r\n  }\r\n\r\n  listenersUpdateBox(data) {\r\n    const info = (0,_utils_deepCopy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(data);\r\n    const drawId = this.sourceMap.get(info.id).drawId;\r\n    const element = document.querySelector('#' + drawId);\r\n    Object.assign(this.listenerStyleMap.get(drawId), info);\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(element, this.convertListenerPixel(info));\r\n  }\r\n\r\n  /**\r\n   * 监听者放回拖拉盒子\r\n   * @param data\r\n   * @param data.imgId 占位图ID\r\n   * @param data.drawId 真实拖拽元素ID\r\n   */\r\n  listenersPutBackBox(data) {\r\n    const { drawId, imgId } = this.sourceMap.get(data)\r\n    const element = document.querySelector('#' + imgId);\r\n    const sourceElement = document.querySelector('#' + drawId);\r\n    this.sourceMap.delete(data);\r\n    this.listenerStyleMap.delete(drawId)\r\n    element.replaceWith(sourceElement.childNodes[0])\r\n    document.querySelector(this.dragBox).removeChild(sourceElement);\r\n  }\r\n\r\n  /**\r\n   * 监听者移动盒子\r\n   * @param data\r\n   * @param data.imgId 占位图ID\r\n   * @param data.drawId 真实拖拽元素ID\r\n   * @param data.transform 最新的拖拽盒子的坐标\r\n   */\r\n  listenersMoveBox(data) {\r\n    const info = (0,_utils_deepCopy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(data);\r\n    const drawId = this.sourceMap.get(info.id).drawId;\r\n    const element = document.querySelector('#' + drawId);\r\n    Object.assign(this.listenerStyleMap.get(drawId), info);\r\n    element.style.transform = this.convertListenerPixel(info).transform;\r\n  }\r\n\r\n  /**\r\n   * 监听者盒子改变大小\r\n   * @param data\r\n   * @param data.imgId 占位图ID\r\n   * @param data.drawId 真实拖拽元素ID\r\n   * @param data.transform 最新的拖拽盒子的坐标\r\n   * @param data.width 最新的拖拽盒子的宽度\r\n   * @param data.height 最新的拖拽盒子的高度\r\n   */\r\n  listenersZoomBox(data) {\r\n    const info = (0,_utils_deepCopy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(data);\r\n    const drawId = this.sourceMap.get(info.id).drawId;\r\n    const element = document.querySelector('#' + drawId);\r\n    Object.assign(this.listenerStyleMap.get(drawId), info);\r\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setObjectStyle)(element, this.convertListenerPixel(info));\r\n  }\r\n\r\n  /**\r\n   * 监听者改变层级\r\n   * @param data\r\n   * @param data.drawId 真实拖拽元素ID\r\n   */\r\n  listenersIndexBox(data) {\r\n    const info = (0,_utils_deepCopy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(data);\r\n    const drawId = this.sourceMap.get(info.id).drawId;\r\n    const element = document.querySelector('#' + drawId);\r\n    element.style.zIndex = info['index'];\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Drag);\r\n\n\n//# sourceURL=webpack://drageverywhere/./core/drag.js?");

/***/ }),

/***/ "./core/utils/deepCopy.js":
/*!********************************!*\
  !*** ./core/utils/deepCopy.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deepCopy\": function() { return /* binding */ deepCopy; },\n/* harmony export */   \"deepCopyWith\": function() { return /* binding */ deepCopyWith; }\n/* harmony export */ });\nconst deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n  Object.keys(obj).forEach((key) => {\r\n    copy[key] = deepCopy(obj[key]);\r\n  });\r\n  return copy;\r\n};\r\n\r\nconst deepCopyWith = (obj, customizer) => {\r\n  function deepCopyWithHelper(value, innerKey, innerObject) {\r\n    const result = customizer(value, innerKey, innerObject);\r\n    if (result !== undefined)\r\n      return result;\r\n    if (value === null || typeof value !== 'object') {\r\n      return value;\r\n    }\r\n    const copy = Array.isArray(value) ? [] : {};\r\n    Object.keys(value).forEach((k) => {\r\n      copy[k] = deepCopyWithHelper(value[k], k, value);\r\n    });\r\n    return copy;\r\n  }\r\n\r\n  if (customizer) {\r\n    return deepCopyWithHelper(obj, '', null);\r\n  } else {\r\n    return deepCopy(obj);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://drageverywhere/./core/utils/deepCopy.js?");

/***/ }),

/***/ "./core/utils/index.js":
/*!*****************************!*\
  !*** ./core/utils/index.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isHTMLElement\": function() { return /* binding */ isHTMLElement; },\n/* harmony export */   \"reduceSearchClass\": function() { return /* binding */ reduceSearchClass; },\n/* harmony export */   \"findParentNode\": function() { return /* binding */ findParentNode; },\n/* harmony export */   \"objectToString\": function() { return /* binding */ objectToString; },\n/* harmony export */   \"setObjectStyle\": function() { return /* binding */ setObjectStyle; },\n/* harmony export */   \"throttle\": function() { return /* binding */ throttle; },\n/* harmony export */   \"getRectWidth\": function() { return /* binding */ getRectWidth; },\n/* harmony export */   \"getRectHeight\": function() { return /* binding */ getRectHeight; },\n/* harmony export */   \"hasKey\": function() { return /* binding */ hasKey; }\n/* harmony export */ });\n/**\r\n * 判断这个元素是否是HTML节点\r\n * @param obj\r\n * @returns {boolean}\r\n */\r\nfunction isHTMLElement(obj) {\r\n  const e = document.createElement(\"div\");\r\n  try {\r\n    e.appendChild(obj.cloneNode(true));\r\n    return obj.nodeType === 1;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 搜索是否是拖动盒子的子节点\r\n * @param childNode html节点\r\n * @returns {boolean}\r\n */\r\nfunction reduceSearchClass(childNode) {\r\n  const parentNode = document.querySelectorAll('.drag-box');\r\n  if (!parentNode.length) return false;\r\n  for (let i = 0; i < parentNode.length; i++) {\r\n    if (parentNode[i].contains(childNode)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * 递归查找父节点包含某个类名的节点\r\n * @param element html节点\r\n * @param className 类名\r\n * @returns {HTMLElement}\r\n */\r\nfunction findParentNode(element, className) {\r\n  if (element.className === className) {\r\n    return element;\r\n  } else if (element && element.parentNode) {\r\n    return findParentNode(element.parentNode, className);\r\n  }\r\n}\r\n\r\n/**\r\n * 对象转字符串\r\n * @param object\r\n * @returns {string}\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nfunction objectToString(object) {\r\n  if (typeof object !== 'object') {\r\n    throw new Error(`${object} must be an object`);\r\n  }\r\n  let str = '';\r\n  for (const [k, v] of Object.entries(object)) {\r\n    str += `${k}: ${v};`;\r\n  }\r\n  return str;\r\n}\r\n\r\n/**\r\n * 设定html元素样式\r\n * @param element\r\n * @param styleObject\r\n * @returns {HTMLElement}\r\n */\r\nfunction setObjectStyle(element, styleObject) {\r\n  if (typeof styleObject !== 'object') {\r\n    throw new Error(`${styleObject} must be an object`);\r\n  }\r\n  if (!isHTMLElement(element)) {\r\n    throw new Error(`${element} must be a HTMLElement`);\r\n  }\r\n  for (const [propertyName, value] of Object.entries(styleObject)) {\r\n    element.style.setProperty(propertyName, value);\r\n  }\r\n  return element;\r\n}\r\n\r\n/**\r\n * 节流函数\r\n * @param fun\r\n * @param delay\r\n * @param imd 是否立即执行\r\n * @returns {(function(): void)|*}\r\n */\r\nfunction throttle(fun, delay, imd=true) {\r\n  let timer = null;\r\n  let startTime = Date.now();\r\n  if(imd){\r\n    return function () {\r\n      const currentTime = Date.now();\r\n      const remaining = delay - (currentTime - startTime);\r\n      const args = arguments;\r\n      clearTimeout(timer);\r\n      if (remaining <= 0) {\r\n        fun.apply(this, args);\r\n        startTime = Date.now();\r\n      } else {\r\n        timer = setTimeout(fun, remaining);\r\n      }\r\n    }\r\n  } else {\r\n    return function(){\r\n      clearTimeout(timer);\r\n      timer = setTimeout(()=>{\r\n        fun.apply(this, arguments);\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction getRectWidth(rect) {\r\n  return rect.width || (rect.right - rect.left);\r\n}\r\n\r\nfunction getRectHeight(rect) {\r\n  return rect.height || (rect.bottom - rect.top);\r\n}\r\n\r\nfunction hasKey(obj, key) {\r\n  return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\n\n\n//# sourceURL=webpack://drageverywhere/./core/utils/index.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ (function(module) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://drageverywhere/./node_modules/events/events.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./core/drag.js");
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;